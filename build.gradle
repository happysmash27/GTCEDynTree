import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'wtf.gofancy.fancygradle' version '1.1.+'
}

group = project.mod_maven_group
archivesBaseName = project.mod_jar_name
version = "${project.minecraft_version}-${project.mod_version}"

sourceCompatibility = compileJava.sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = compileJava.targetCompatibility = JavaVersion.VERSION_1_8

minecraft {
    mappings channel: project.mappings_channel, version: project.mappings_version

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }

        server {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }
    }
}

fancyGradle {
    patches {
        resources
        coremods
        codeChickenLib
        asm
        mergetool
    }
}

repositories {
    maven {
        url 'https://cursemaven.com'
    }
    maven {
        url 'https://harleyoconnor.com/maven' // Dynamic Trees
    }
    maven {
        url 'https://chickenbones.net/maven/' // CCL
    }
    maven {
        url 'https://dvs1.progwml6.com/files/maven/' // JEI
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

    runtimeOnly "codechicken:CodeChickenLib:${project.deps_ccl_version}:universal"

    implementation fg.deobf("com.ferreusveritas.dynamictrees:DynamicTrees-${project.deps_dynamictrees_version}")
    implementation fg.deobf("curse.maven:gregtech-${project.deps_gregtechceu_version}-${project.deps_gregtechceu_curse_ref}")
    implementation fg.deobf("curse.maven:hwyla-${deps_hwyla_version}-${project.deps_hwyla_curse_ref}")

    runtimeOnly "mezz.jei:jei_${project.deps_jei_version}"
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand(project.properties)
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
    duplicatesStrategy = 'include'
}

task processSource(type: Sync) {
    from sourceSets.main.java
    into "$buildDir/src"
    filter(ReplaceTokens, tokens: [
            MOD_ID        : project.mod_id,
            MOD_NAME      : project.mod_name,
            MOD_UPDATE_URL: project.mod_update_url,
    ])
}

compileJava {
    source = processSource.outputs
}

java {
    withSourcesJar()
}

jar {
    finalizedBy 'reobfJar'
    manifest {
        attributes([
                'Specification-Title'     : project.mod_name,
                'Specification-Version'   : project.mod_version,
                'Specification-Vendor'    : project.mod_author,
                'Implementation-Title'    : project.mod_id,
                'Implementation-Version'  : project.mod_version,
                'Implementation-Vendor'   : project.mod_author,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
